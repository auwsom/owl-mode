// Generated by CoffeeScript 1.4.0
(function() {

  this.Page = (function() {

    function Page(pageName, body) {
      this.pageName = pageName;
      this.body = body;
      this.created = new Date().toString();
      this.saved = "";
      this.text = "";
    }

    Page.prototype.toString = function() {
      return "" + this.pageName + " \n " + this.body + " \n " + this.created + " \n " + this.saved + " ";
    };

    return Page;

  })();

  this.BrowserBasedPageStore = (function() {

    function BrowserBasedPageStore() {}

    BrowserBasedPageStore.prototype.k = function(pName) {
      return "fpt.pageStore." + pName;
    };

    BrowserBasedPageStore.prototype.x = function(pName) {
      return "fpt.ps.X." + pName;
    };

    BrowserBasedPageStore.prototype.isDirty = function(pName) {
      var s;
      s = localStorage.getItem(this.x(pName));
      return s === "true";
    };

    BrowserBasedPageStore.prototype.setDirty = function(pName) {
      return localStorage.setItem(this.x(pName), "true");
    };

    BrowserBasedPageStore.prototype.setClean = function(pName) {
      return localStorage.setItem(this.x(pName), "false");
    };

    BrowserBasedPageStore.prototype.hasName = function(pName) {
      var s;
      s = localStorage.getItem(this.k(pName));
      if (s != null) {
        return true;
      }
      return false;
    };

    BrowserBasedPageStore.prototype.get = function(pName, callback) {
      var page, s;
      s = localStorage.getItem(this.k(pName));
      if (s != null) {
        page = JSON.parse(s);
      } else {
        page = new Page(pName, initialOpmltext);
      }
      return callback(page);
    };

    BrowserBasedPageStore.prototype.set = function(pName, page) {
      localStorage.setItem(this.k(pName), JSON.stringify(page));
      return this.setDirty(pName);
    };

    BrowserBasedPageStore.prototype.save = function(page, errorCallback) {
      page.saved = new Date().toString();
      return this.set(page.pageName, page);
    };

    return BrowserBasedPageStore;

  })();

  this.ServerBasedPageStore = (function() {

    function ServerBasedPageStore(getUrl, postUrl, postSuccessHandler) {
      this.getUrl = getUrl;
      this.postUrl = postUrl;
      this.postSuccessHandler = postSuccessHandler;
    }

    ServerBasedPageStore.prototype.get = function(pName, callback) {
      var _this = this;
      return $.ajax({
        type: 'GET',
        url: this.getUrl + pName,
        success: function(data) {
          console.log(data);
          return callback(new Page(pName, data));
        },
        error: function(xmlHttpRequest) {
          return console.log("ERROR IN get " + pName);
        }
      });
    };

    ServerBasedPageStore.prototype.save = function(page, saveErrorHandler) {
      var _this = this;
      return $.ajax({
        type: 'POST',
        url: this.postUrl + page.pageName,
        data: {
          "pageName": page.pageName,
          "body": page.body,
          "text": page.text
        },
        success: function(data) {
          return _this.postSuccessHandler(page.pageName);
        },
        error: function(xmlHttpRequest) {
          console.log("ERROR IN POST " + page.pageName);
          console.log(xmlHttpRequest);
          return saveErrorHandler(xmlHttpRequest);
        }
      });
    };

    return ServerBasedPageStore;

  })();

}).call(this);
